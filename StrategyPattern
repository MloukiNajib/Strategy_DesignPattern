# Strategy Pattern (Patron Stratégie) 🎯

Le Strategy Pattern est un pattern comportemental qui permet de définir une famille d'algorithmes, de les encapsuler dans des classes séparées et de les rendre interchangeables.

📌 Problème résolu
Vous avez plusieurs variantes d'un algorithme (ex : différents types de tris, méthodes de paiement, règles de calcul).

Vous voulez éviter les if/else ou switch complexes pour choisir entre ces algorithmes.

Vous souhaitez pouvoir changer l'algorithme à l'exécution.

🎯 Structure du Pattern
1. Composants clés
Composant	Rôle
Strategy	Interface commune à tous les algorithmes (ex: PaymentStrategy).
ConcreteStrategy	Implémentations spécifiques (ex: CreditCard, PayPal, Bitcoin).
Context	Classe qui utilise une stratégie (ex: ShoppingCart).
2. Diagramme simplifié
┌───────────────────┐       ┌───────────────────────┐
│     Context       │       │      Strategy         │
├───────────────────┤       ├───────────────────────┤
│ - strategy: Strategy │<>───│ + executeAlgorithm() │
└───────────────────┘       └───────────────────────┘
                                      ^
                     _________________|_________
                    |                          |
        ┌─────────────────────┐  ┌─────────────────────┐
        │  ConcreteStrategyA  │  │  ConcreteStrategyB  │
        └─────────────────────┘  └─────────────────────┘
